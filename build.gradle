plugins {
    id 'cpp-library'
    id 'java-library'
	id 'com.github.ben-manes.versions' version '0.44.0'
    id 'visual-studio'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

group = 'io.calimero'
version = '2.6-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

java {
    withSourcesJar()
    withJavadocJar()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


compileJava.options*.compilerArgs = [
	'-Xlint:all,-serial',
	"--limit-modules", "java.base,io.calimero.core"
]

compileTestJava.options*.compilerArgs = [
	'-Xlint:all',
	'-Xlint:-try',
]

tasks.withType(Jar) {
	from("${projectDir}") {
        include 'LICENSE'
        include 'LICENSE.java'
        into "META-INF"
    }
    if (name.equals('sourcesJar')) {
    	from("${projectDir}") {
		    include 'README.md'
        }
        from("${projectDir}/src") {
		    include 'include/**', 'unix/**', 'win/**'
        }
    }
    if (name.equals('jar')) {
    	from("${projectDir}/bin") {
		    include 'linux*/**', 'win*/**'
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption("Xdoclint:-missing", '-quiet')
}



// set this variable manually to Java home directory if default location does not work
def javaHome = System.properties['java.home']
def cppStd = "-std=c++17"

import org.gradle.internal.os.OperatingSystem;
def os = OperatingSystem.current()

library {
    println "Platform " + os
    println "Java home directory = ${javaHome}"

    source {
        if (os.isWindows())
            from fileTree(dir: "src/win", include: "**/*.cpp")
        else // linux, macos
            from fileTree(dir: "src/unix", include: "**/*.cpp")
    }

    privateHeaders {
        from("src/include", "${javaHome}/include", "${javaHome}/../include")
        def osSpecificInclude = os.isLinux() ? 'linux' : os.isMacOsX() ? 'darwin' : os.isWindows() ? 'win32' : ''
        from("${javaHome}/include/${osSpecificInclude}", "${javaHome}/../include/${osSpecificInclude}")
    }

    baseName = "serialcom"
    linkage = [ Linkage.SHARED ]

    binaries.configureEach {
        def compileTask = compileTask.get()
        compileTask.positionIndependentCode = "true"
        
        if ((toolChain in Clang || toolChain in Gcc) && !compileTask.isOptimized()) {
            // maybe -O0 works better, -Og still does several optimizations
            // option "-g" is included by default
            compileTask.compilerArgs = [ cppStd, "-DDEBUG", "-Wall", "-Og" ]
        }

        if (toolChain in Clang && compileTask.isOptimized()) {
            compileTask.debuggable = "false"
            // "-Wl,-s" not necessary
            compileTask.compilerArgs = [ cppStd, "-Wall", "-Oz", "-fno-cxx-exceptions" ]
        }
        if (toolChain in Gcc && compileTask.isOptimized()) {
            compileTask.debuggable = "false"
            // "-Wl,-s" not necessary
            compileTask.compilerArgs = [ cppStd, "-Wall", "-Os", "-fno-exceptions" ]
        }

        if (toolChain in VisualCpp && !compileTask.isOptimized()) {
            // '/Zi' already included
            compileTask.compilerArgs = [ '/DDEBUG', "/Wall" ]
            def linkTask = linkTask.get()
            linkTask.linkerArgs = [ '/DEBUG' ]
        }
        if (toolChain in VisualCpp && compileTask.isOptimized()) {
            compileTask.debuggable = "false"
            compileTask.compilerArgs = [ '/Os', "/Wall" ]
        }

        def compile = compileTask.isOptimized() ? "release" : "debug"
        println "Additional compiler args for ${compile} version: " + compileTask.compilerArgs.get()
    }
}

if (!os.isWindows()) {
    // always build debug/release(+stripped) versions
    build.dependsOn { stripSymbolsRelease }
}

dependencies {
    // both cpp-library and java-library plugin use api & implementation configurations, 
    // hence cpp-library tries to resolve java dependencies, workaround with configurations not known by cpp
//    api "io.calimero:calimero-core:${version}"
    compileOnly "io.calimero:calimero-core:${version}"
    runtimeOnly "io.calimero:calimero-core:${version}"
}

// don't publish the cpp artifacts
generateMetadataFileForMainPublication.enabled = false
publishMainPublicationToMavenLocal.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            pom {
                name = 'Calimero serial-native service provider'
                description = 'Serial comummication provider using JNI'
                url = 'https://github.com/calimero-project/serial-native'
                inceptionYear = '2006'
                licenses {
                    license {
                        name = "GNU General Public License, version 2, with the Classpath Exception"
                        url = 'LICENSE.java'
                    }
                    license {
                        name = "GNU Lesser General Public License, version 2.1"
                        url = 'LICENSE'
                    }
                }
                developers {
                    developer {
                        name = "Boris Malinowsky"
                        email = "b.malinowsky@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/calimero-project/serial-native.git'
                    url = 'https://github.com/calimero-project/serial-native.git'
                }
            }
        }
    }
    repositories {
        maven {
            name 'maven'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}
